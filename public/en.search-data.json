{"/docs/":{"data":{"":"üëã Hello! Welcome to the SilentPayments.xyz documentation!","next#Next":"Dive right into the following section to get started:\nSilent Payments, ExplainedLearn more about why we need Silent Payments and how they work. ","questions-or-feedback#Questions or Feedback?":" ‚ùì This website is a labor of love, done in my spare time. Have a question or feedback? Feel free to open an issue! ","what-is-silentpaymentsxyz#What is SilentPayments.xyz?":"I‚Äôve put together this website to help rally the Bitcoin community around an invaluable privacy tool, Silent Payments. There has already been fantastic traction to integrate Silent Payments into several wallets, but I thought there was a gap in documentation and explanations that I could fill.\nIn this documentation I‚Äôll break down what Silent Payments are and why we need them, keep you up to date on what wallets support Silent Payments, and point wallet developers out there to the best libraries and resources on integrating Silent Payments into their wallet."},"title":"Documentation"},"/docs/explained/":{"data":{"":"","enter-silent-payments#Enter Silent Payments":"In March of 2022 Ruben Somsen proposed ‚ÄúSilent Payments,‚Äù a new approach to reusable payment codes that removes the need for a notification transaction (the major drawback of BIP 47 payment codes) entirely by leveraging the outputs in a transaction to signal to the recipient when funds are intended for them. Silent Payments makes use of advances in Bitcoin scanning to remove the need for a notification transaction, thereby improving scaling and privacy associated with reusable payment codes (with a key trade-off we‚Äôll address later).\nWhat a Silent Payment address looks like:\nsp1qqweplq6ylpfrzuq6hfznzmv28djsraupudz0s0dclyt8erh70pgwxqkz2ydatksrdzf770umsntsmcjp4kcz7jqu03jeszh0gdmpjzmrf5u4zh0c\nHow they work When Alice goes to send funds to Bob, she takes three keys and creates a unique one-time address that only Bob controls the keys to. These three keys are the (1) public key of the output(s) Alice wants to send to Bob, (2) Bob‚Äôs public key in his reusable payment code, and (3) a shared secret (generated using the same cryptography as stealth addresses and BIP 47, ‚ÄúECDH‚Äú) that only Alice and Bob know. These three keys combine into a unique one-time address that Bob can then validate and spend from, allowing Alice to generate practically infinite addresses without any communication with Bob. This payment appears exactly like any other payment using the same script type (i.e. Taproot), thereby preventing an outside observer from even knowing Silent Payments were used at all, much less link payments to a Silent Payment address together.\nWhen Bob wants to check for received funds, he takes (1) the private key from his payment code and (2) the aggregated key across the inputs of every transaction on-chain and checks to see if the combination matches an output in a transaction. If it matches, that output is owned by his private key and he can spend it at will, and if it doesn‚Äôt match he simply ignores that transaction and continues scanning. This process of checking every input in transactions is relatively costly and requires a full node, but does preserve privacy and remove the need for problematic notification transactions entirely.\nTradeoffs Because with Silent Payments Bob must scan all transactions on the blockchain from the point that he generated the payment code, it brings us to the significant tradeoff of Silent Payments: because this scanning is relatively costly and can only be performed with a full Bitcoin node, Silent Payments necessarily do not work on light wallets, complicating their usage in practice. The average Bitcoin wallet today will have to connect to a new type of server that serves the necessary data for a wallet to check each and every potential transaction for themselves.\nThankfully, there are many brilliant people working on reducing the impact of this tradeoff through things like transaction cut through, Silent Payments-specific indexes in Bitcoin Core, and much more.","further-reading#Further reading":"Want to do a deeper dive into Silent Payments? Read on below for more resources:\nSilent Payments Bitcoin Improvement Proposal - 352 ‚ÄúSilent Payments Make Bitcoin More Privacy‚Äù - Bitcoin Magazine Bitcoin, Explained Ep. 58 - Silent Payments ‚ÄúMaking sense of stealth addresses‚Äù - Foundation.xyz ","why-do-we-need-reusable-payment-codes#Why do we need reusable payment codes?":"If you‚Äôve ever had to receive Bitcoin multiple times from the same person before, you‚Äôll know that there is a seemingly simple choice to make ‚Äì do you generate a new address for them each time (and communicate it somehow), or do you tell them to re-use the same address? If you choose to generate a new address each time, you have to actively communicate somehow, send them the address, and hope they copy and paste it correctly each time. If you instead choose for them to reuse a single address, you harm the privacy of both participants in order to simplify repeat payments.\nFor a real-world example, consider the case of wanting to accept donations as a political dissident. If you choose to post a single static Bitcoin address, you put every donor (and yourself) at risk of trivial surveillance in order to simplify the process for you and your donors. If you choose to generate a new address for each donor, you have to run extra infrastructure like BTCPay Server or SatSale, increasing the difficulty exponentially and requiring some technical know-how. We‚Äôve even seen a recent example of this in donations raised by Russian opposition leader Alexey Navalny, easily visible to anyone with a blockchain explorer and actively surveilled by the Russian pro-Putin government.\nThe dilemma in both of these simple cases is exactly what reusable payment codes seek to solve, allowing you to provide a single static string of characters (a ‚Äúcode‚Äù) that can be reused as many times as necessary ‚Äì even by multiple senders ‚Äì without sacrificing privacy or requiring online communication with the recipient. Silent Payments were created to solve this dilemma in a modern, efficient way."},"title":"Silent Payments, Explained"},"/docs/fordevelopers/":{"data":{"":"For the developers among you, this page is a simple page to point you in the right direction for where to look into for integration on both the wallet and scanning side.","scanning-back-ends#Scanning back-ends":" BlindBit blindbit-oracle blindbitd WIP light client specification louisinger/silentiumd cake-tech/electrs Note that this is a WIP fork of electrs with optimized support for Silent Payment scanning added. ","wallet-libraries#Wallet libraries":" cygnet3/rust-silentpayments Warning: both this crate and BIP352 are still quite new. Review this library carefully before using it with mainnet funds. "},"title":"Silent Payments For Developers"},"/docs/walletsupport/":{"data":{"":"One of the hardest things to keep up with in the Bitcoin space is keeping up with what wallets have deployed new features, what specific aspects have been deployed, and much more.\nI‚Äôll do my best to keep this page up to date, but if you see something that needs to be updated please submit a PR (use that ‚ÄúEdit this page on Github‚Äù button -\u003e) or open an issue.\nWallet Github Sending Receiving Privacy-preserving scanning Cake Wallet cake-tech/cake_wallet Silentium louisinger/silentium "},"title":"Silent Payments Wallet Support"}}